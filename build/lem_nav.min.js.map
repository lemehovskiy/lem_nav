{"version":3,"sources":["lem_nav.es6"],"names":["factory","define","amd","exports","module","require","jQuery","$","LemNav","element","options","_classCallCheck","this","self","nav","dropdowns","navbar_open","$navbar","settings","extend","navbar_toggle","collapse_duration","trigger","trigger_linked","extra_trigger_button","navbar_collapse_duration","on_dropdown_shown","on_dropdown_hide","init","_createClass","key","value","set_dropdowns_data","is_touch_device","addClass","window","click","close_all","forEach","dropdown","on","event","stopPropagation","open","close","close_other_branches","branch_id","hover","navbar_collapse","get_submenu","nested_submenu","nav_item","$nav_item","menu","find","menu_items","menu_lv","extra_trigger","each","push","index","sub_menu","current_branch_id","navbar_trigger","TweenLite","to","height","removeClass","set","from","$trigger","append","dropdown_shown","current_menu_height","outerHeight","onComplete","document","createEvent","e","fn","lemNav","$this","opt","arguments","args","Array","prototype","slice","call","length","i","ret","_typeof","lem_nav","apply"],"mappings":"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","file":"lem_nav.min.js","sourcesContent":[";(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})\n\n(function ($) {\n    'use strict';\n\n    class LemNav {\n\n        constructor(element, options) {\n\n            let self = this;\n\n            self.nav = {};\n\n            self.nav.dropdowns = [];\n\n            self.nav.navbar_open = false;\n\n            self.$navbar = $(element);\n\n            self.settings = $.extend({\n                navbar_toggle: '.lem-navbar-toggle',\n                collapse_duration: 0.2,\n                trigger: 'click',\n                trigger_linked: false,\n                extra_trigger_button: \"<button class='extra-trigger'>+</button>\",\n                navbar_collapse_duration: 0.5,\n                on_dropdown_shown: function () {\n                },\n                on_dropdown_hide: function () {\n                }\n\n            }, options);\n\n            self.init();\n        }\n\n        init() {\n            let self = this;\n\n            this.set_dropdowns_data();\n\n            if (self.is_touch_device()) {\n                $('body').addClass('is-touch');\n            }\n\n            if (this.settings.trigger == 'click') {\n                self.$navbar.addClass('trigger-click');\n            }\n\n            if (self.settings.trigger == 'click') {\n                $(window).click(function () {\n                    self.close_all();\n                });\n                self.nav.dropdowns.forEach(function (dropdown) {\n\n                    dropdown.trigger.on('click', function (event) {\n\n                        event.stopPropagation();\n                        if (dropdown.open) {\n\n                            self.close({\n                                dropdown: dropdown\n                            })\n                        }\n                        else {\n\n                            self.close_other_branches(dropdown.branch_id);\n                            self.open({\n                                dropdown: dropdown\n                            })\n                        }\n                    })\n                })\n            }\n\n            else if (self.settings.trigger == 'hover' && !(self.is_touch_device())) {\n                self.nav.dropdowns.forEach(function (dropdown) {\n                    dropdown.trigger.hover(\n                        function () {\n                            self.open({\n                                dropdown: dropdown\n                            })\n                        },\n                        function () {\n                            self.close({\n                                dropdown: dropdown\n                            })\n                        }\n                    )\n                })\n            }\n\n            self.navbar_collapse();\n        }\n\n        set_dropdowns_data() {\n            let self = this;\n\n            self.$navbar.find('.nav >.menu-item-has-children').each(function (index) {\n\n                let sub_menu = get_submenu(\n                    {\n                        $nav_item: $(this),\n                        menu_lv: 1,\n                        branch_id: index\n                    }\n                );\n\n                self.nav.dropdowns.push(sub_menu);\n\n            });\n\n\n            function get_submenu(options) {\n\n                let nested_submenu = {\n                    nav_item: options.$nav_item,\n                    trigger: options.$nav_item,\n                    menu: options.$nav_item.find('>.sub-menu'),\n                    menu_items: options.$nav_item.find('>.sub-menu >li'),\n                    menu_lv: options.menu_lv,\n                    branch_id: options.branch_id\n                }\n\n\n                if (self.settings.trigger_linked) {\n                    nested_submenu.extra_trigger = self.extra_trigger(options.$nav_item)\n                }\n\n                options.$nav_item.find('>.sub-menu >.menu-item-has-children').each(function () {\n                    self.nav.dropdowns.push(get_submenu(\n                        {\n                            $nav_item: $(this),\n                            menu_lv: options.menu_lv + 1,\n                            branch_id: options.branch_id\n                        })\n                    )\n                });\n\n                return nested_submenu\n\n            }\n\n        }\n\n        close_other_branches(current_branch_id) {\n            let self = this;\n\n            self.nav.dropdowns.forEach(function (dropdown) {\n                if (dropdown.open && !dropdown.branch_id == current_branch_id) {\n                    self.close({\n                        dropdown: dropdown\n                    })\n                }\n            })\n        }\n\n        close_other() {\n\n        }\n\n        navbar_collapse() {\n            let self = this;\n\n            self.nav.navbar_trigger = $(self.settings.navbar_toggle);\n\n\n            self.nav.navbar_trigger.on('click', function () {\n                if (self.nav.navbar_open) {\n                    TweenLite.to(self.$navbar, self.settings.navbar_collapse_duration, {height: 0})\n\n                    self.nav.navbar_open = false;\n                    self.nav.navbar_trigger.removeClass('open');\n                }\n\n                else {\n                    TweenLite.set(self.$navbar, {height: \"auto\"})\n                    TweenLite.from(self.$navbar, self.settings.navbar_collapse_duration, {height: 0})\n\n                    self.nav.navbar_open = true;\n                    self.nav.navbar_trigger.addClass('open');\n                }\n            })\n        }\n\n        extra_trigger($nav_item) {\n            let self = this;\n\n\n            let $trigger = $(self.settings.extra_trigger_button);\n\n            $nav_item.append($trigger);\n\n            return $trigger;\n        }\n\n        open(options) {\n            let self = this;\n            let dropdown = options.dropdown;\n            let current_menu_height = dropdown.menu.outerHeight();\n\n            TweenLite.set(dropdown.menu, {height: \"auto\"})\n            TweenLite.from(dropdown.menu, self.settings.collapse_duration, {\n                height: current_menu_height,\n                onComplete: dropdown_shown\n            })\n\n            dropdown.open = true;\n            dropdown.nav_item.addClass('open');\n\n            function dropdown_shown() {\n                self.settings.on_dropdown_shown()\n            }\n        }\n\n        close(options) {\n            let self = this;\n            let dropdown = options.dropdown;\n\n            self.settings.on_dropdown_hide()\n\n            TweenLite.to(dropdown.menu, self.settings.collapse_duration, {height: 0})\n\n            dropdown.open = false;\n            dropdown.nav_item.removeClass('open');\n        }\n\n        is_touch_device() {\n            try {\n                document.createEvent(\"TouchEvent\");\n                return true;\n            } catch (e) {\n                return false;\n            }\n        };\n    }\n\n\n    $.fn.lemNav = function () {\n        let $this = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            length = $this.length,\n            i,\n            ret;\n        for (i = 0; i < length; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                $this[i].lem_nav = new LemNav($this[i], opt);\n            else\n                ret = $this[i].lem_nav[opt].apply($this[i].lem_nav, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return $this;\n    };\n\n\n});"]}