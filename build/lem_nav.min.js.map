{"version":3,"sources":["lem_nav.es6"],"names":["factory","define","amd","exports","module","require","jQuery","$","LemNav","element","options","_classCallCheck","this","self","nav","dropdowns","navbar_open","$navbar","settings","extend","navbar_toggle","collapse_duration","trigger","trigger_linked","extra_trigger_button","navbar_collapse_duration","navbar_animation","submenu_animation","init","_createClass","key","value","set_dropdowns_data","is_touch_device","addClass","window","click","close_all","forEach","dropdown","on","event","stopPropagation","open","close","close_other_branches","branch_id","hover","extra_trigger","initNavbarCollapse","get_submenu","nested_submenu","nav_item","$nav_item","menu","find","menu_items","menu_lv","each","push","index","sub_menu","current_branch_id","navbar_trigger","TweenLite","to","autoAlpha","y","height","removeClass","fromTo","set","from","$trigger","append","dropdown_shown","current_menu_height","outerHeight","console","log","onComplete","document","createEvent","e","fn","lemNav","$this","opt","arguments","args","Array","prototype","slice","call","length","i","ret","_typeof","lem_nav","apply"],"mappings":"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","file":"lem_nav.min.js","sourcesContent":[";(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})\n\n(function ($) {\n    'use strict';\n\n    class LemNav {\n\n        constructor(element, options) {\n\n            let self = this;\n\n            self.nav = {};\n\n            self.nav.dropdowns = [];\n\n            self.nav.navbar_open = false;\n\n            self.$navbar = $(element);\n\n            self.settings = $.extend({\n                navbar_toggle: '.lem-navbar-toggle',\n                collapse_duration: 0.2,\n                trigger: 'click',\n                trigger_linked: false,\n                extra_trigger_button: \"<button class='extra-trigger'><i class='icon icon-down-open-big'></i></button>\",\n                navbar_collapse_duration: 0.5,\n                navbar_animation: 'shift',\n                submenu_animation: 'fade'\n\n            }, options);\n\n            self.init();\n        }\n\n        init() {\n            let self = this;\n\n            this.set_dropdowns_data();\n\n            if (self.is_touch_device()) {\n                $('body').addClass('is-touch');\n            }\n\n            if (self.settings.trigger == 'click') {\n                self.$navbar.addClass('trigger-click');\n\n                $(window).click(function () {\n                    self.close_all();\n                });\n\n                self.nav.dropdowns.forEach(function (dropdown) {\n\n                    dropdown.trigger.on('click', function (event) {\n\n                        event.stopPropagation();\n                        if (dropdown.open) {\n\n                            self.close({\n                                dropdown: dropdown\n                            })\n                        }\n                        else {\n                            self.close_all();\n                            self.close_other_branches(dropdown.branch_id);\n                            self.open({\n                                dropdown: dropdown\n                            })\n                        }\n                    })\n                })\n            }\n\n            else if (self.settings.trigger == 'hover' && !(self.is_touch_device())) {\n                self.nav.dropdowns.forEach(function (dropdown) {\n                    dropdown.trigger.hover(\n                        function () {\n                            self.open({\n                                dropdown: dropdown\n                            })\n                        },\n                        function () {\n                            self.close({\n                                dropdown: dropdown\n                            })\n                        }\n                    )\n                })\n            }\n\n            if (self.settings.trigger_linked) {\n                self.nav.dropdowns.forEach(function (dropdown) {\n                    dropdown.extra_trigger.on('click', function (event) {\n\n                        event.stopPropagation();\n                        if (dropdown.open) {\n\n                            self.close({\n                                dropdown: dropdown\n                            })\n                        }\n                        else {\n\n                            self.close_other_branches(dropdown.branch_id);\n                            self.open({\n                                dropdown: dropdown\n                            })\n                        }\n                    })\n                })\n\n            }\n\n            self.initNavbarCollapse();\n        }\n\n        set_dropdowns_data() {\n            let self = this;\n\n            self.$navbar.find('.nav >.menu-item-has-children').each(function (index) {\n\n                let sub_menu = get_submenu(\n                    {\n                        $nav_item: $(this),\n                        menu_lv: 1,\n                        branch_id: index\n                    }\n                );\n\n                self.nav.dropdowns.push(sub_menu);\n\n            });\n\n\n            function get_submenu(options) {\n\n                let nested_submenu = {\n                    nav_item: options.$nav_item,\n                    trigger: options.$nav_item,\n                    menu: options.$nav_item.find('>.sub-menu'),\n                    menu_items: options.$nav_item.find('>.sub-menu >li'),\n                    menu_lv: options.menu_lv,\n                    branch_id: options.branch_id\n                }\n\n\n                if (self.settings.trigger_linked) {\n                    nested_submenu.extra_trigger = self.extra_trigger(options.$nav_item)\n                }\n\n                options.$nav_item.find('>.sub-menu >.menu-item-has-children').each(function () {\n                    self.nav.dropdowns.push(get_submenu(\n                        {\n                            $nav_item: $(this),\n                            menu_lv: options.menu_lv + 1,\n                            branch_id: options.branch_id\n                        })\n                    )\n                });\n\n                return nested_submenu\n\n            }\n\n        }\n\n        close_other_branches(current_branch_id) {\n            let self = this;\n\n            self.nav.dropdowns.forEach(function (dropdown) {\n                if (dropdown.open && !dropdown.branch_id == current_branch_id) {\n                    self.close({\n                        dropdown: dropdown\n                    })\n                }\n            })\n        }\n\n        initNavbarCollapse() {\n            let self = this;\n\n            self.nav.navbar_trigger = $(self.settings.navbar_toggle);\n\n\n            self.nav.navbar_trigger.on('click', function () {\n                if (self.nav.navbar_open) {\n\n                    switch (self.settings.navbar_animation) {\n                        case 'shift':\n                            TweenLite.to(self.$navbar, self.settings.navbar_collapse_duration,\n                                {autoAlpha: 0, y: 20}\n                            )\n                            break;\n\n                        case 'collapse':\n                            TweenLite.to(self.$navbar, self.settings.navbar_collapse_duration, {height: 0})\n                            break;\n                    }\n\n                    self.nav.navbar_open = false;\n                    self.nav.navbar_trigger.removeClass('open');\n                }\n\n                else {\n                    switch (self.settings.navbar_animation) {\n                        case 'shift':\n                            TweenLite.fromTo(self.$navbar, self.settings.navbar_collapse_duration,\n                                {autoAlpha: 0, y: 20},\n                                {autoAlpha: 1, y: 0}\n                            )\n                            break;\n\n                        case 'collapse':\n                            TweenLite.set(self.$navbar, {height: \"auto\"})\n                            TweenLite.from(self.$navbar, self.settings.navbar_collapse_duration, {height: 0})\n                            break;\n                    }\n\n\n                    self.nav.navbar_open = true;\n                    self.nav.navbar_trigger.addClass('open');\n                }\n            })\n        }\n\n        extra_trigger($nav_item) {\n            let self = this;\n\n\n            let $trigger = $(self.settings.extra_trigger_button);\n\n            $nav_item.append($trigger);\n\n            return $trigger;\n        }\n\n        open(options) {\n            let self = this;\n            let dropdown = options.dropdown;\n            let current_menu_height = dropdown.menu.outerHeight();\n\n\n            switch (self.settings.submenu_animation) {\n                case 'fade':\n\n                    console.log('asdf');\n                    break;\n\n                case 'collapse':\n                    TweenLite.set(dropdown.menu, {height: \"auto\"})\n                    TweenLite.from(dropdown.menu, self.settings.collapse_duration, {\n                        height: current_menu_height,\n                        onComplete: dropdown_shown\n                    })\n                    break;\n            }\n\n\n            dropdown.menu.trigger('show.lnav');\n\n            dropdown.open = true;\n            dropdown.nav_item.addClass('open');\n\n            function dropdown_shown() {\n                dropdown.menu.trigger('shown.lnav')\n            }\n        }\n\n        close_all() {\n            let self = this;\n\n            self.nav.dropdowns.forEach(function (dropdown) {\n                if (dropdown.open) {\n                    self.close({\n                        dropdown: dropdown\n                    })\n                }\n            })\n        }\n\n        close(options) {\n            let self = this;\n            let dropdown = options.dropdown;\n\n            // TweenLite.to(dropdown.menu, self.settings.collapse_duration, {\n            //     height: 0,\n            //     onComplete: dropdown_hidden\n            // })\n\n            dropdown.menu.trigger('hide.lnav');\n\n            dropdown.open = false;\n            dropdown.nav_item.removeClass('open');\n\n            function dropdown_hidden() {\n                dropdown.menu.trigger('hidden.lnav');\n            }\n        }\n\n        is_touch_device() {\n            try {\n                document.createEvent(\"TouchEvent\");\n                return true;\n            } catch (e) {\n                return false;\n            }\n        };\n    }\n\n\n    $.fn.lemNav = function () {\n        let $this = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            length = $this.length,\n            i,\n            ret;\n        for (i = 0; i < length; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                $this[i].lem_nav = new LemNav($this[i], opt);\n            else\n                ret = $this[i].lem_nav[opt].apply($this[i].lem_nav, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return $this;\n    };\n\n\n});"]}